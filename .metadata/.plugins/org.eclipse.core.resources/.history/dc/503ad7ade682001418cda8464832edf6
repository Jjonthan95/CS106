package memorygame;

import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.*;

import java.util.Random;

/**
 *
 * @author Jonathan
 */
public class MemoryGame extends JFrame {

    /**
     * Program will create random memory game with images.
     */

	private static final long serialVersionUID = 1L;
	
	static String files[] = {"src/captain.png", "src/donkey.png", "src/fox.png",
		 "src/jiggly.png", "src/kirby.png", "src/link.png", "src/mario.png",
		 "src/mega.png", "src/luigi.png", "src/ness.png", "src/pikachu.png",
		 "src/samus.png", "src/zelda.png", "src/villager.png", "src/yoshi.png"};
    static JButton buttons[];
    ImageIcon closedIcon;
    int numButtons;
    static ImageIcon icons[];
    Timer myTimer;
    
    
    private final String title = "Smash Match";
    
    int numClicks = 0;
    int oddClickIndex = 0;
    int currentIndex = 0;

    public MemoryGame() {
    	
        //title
        setTitle(title);
        
        //start with maximized window
        setExtendedState(getExtendedState() | JFrame.MAXIMIZED_BOTH);
        
        //closes program when exited
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        //create layout
        setLayout(new GridLayout(5, 6, 2, 2));
        
        //back of icon
        closedIcon = new ImageIcon("src/smash.png");
        
        //creates duplicates of each icon for mathcing
        numButtons = files.length * 2;
        buttons = new JButton[numButtons];
        icons = new ImageIcon[numButtons];
        for (int i = 0, j = 0; i < files.length; i++) {
            icons[j] = new ImageIcon(files[i]);
            buttons[j] = new JButton("");
            buttons[j].addActionListener(new ImageButtonListener());
            buttons[j].setIcon(closedIcon);
            add(buttons[j++]);

            icons[j] = icons[j - 1];
            buttons[j] = new JButton("");
            buttons[j].addActionListener(new ImageButtonListener());
            buttons[j].setIcon(closedIcon);
            add(buttons[j++]);
        }

        //randomize icons array
        Random gen = new Random();
        for (int i = 0; i < numButtons; i++) {
            int rand = gen.nextInt(numButtons);
            ImageIcon temp = icons[i];
            icons[i] = icons[rand];
            icons[rand] = temp;
        }

        //display window
        pack();
        setVisible(true);

        //delay before icons hide
        myTimer = new Timer(1000, new TimerListener());
        
        
    }
    
    //closes and hides both clicked images if don't match
    private class TimerListener implements ActionListener {

        public void actionPerformed(ActionEvent e) {
            buttons[currentIndex].setIcon(closedIcon);
            buttons[oddClickIndex].setIcon(closedIcon);
            myTimer.stop();
        }
    }
    //makes buttons unclickable after match
    public void MatchedTile() {
		JButton click1 = buttons[currentIndex];
		JButton click2 = buttons[oddClickIndex];
		
		click1.setEnabled(false);
		click2.setEnabled(false);
	}
    
    private int points = 0;
	
	//one point per correct match
	private void AddPoint() {
		points++;
		setTitle(title + " - " + points + " Points");
	}
	
	//finish screen
	private void Congrats(){
		if (points > 0){
			
			//creates congratulatory screen w/o button
			JOptionPane optionPane = new JOptionPane("Congradulations! You found them all!", JOptionPane.INFORMATION_MESSAGE, JOptionPane.DEFAULT_OPTION, null, new Object[]{}, null);
			JFrame endScreen = new JFrame();
			endScreen.setTitle("  ");
			endScreen.setSize(224,137);
			endScreen.setVisible(true);
			endScreen.setLocation(560,300);
			endScreen.setResizable(true);
			endScreen.setContentPane(optionPane);
			//overlays new window
			endScreen.setAlwaysOnTop(true);
			//add image to end screen
			endScreen.add(new JLabel(new ImageIcon("src/smash.png")));
			
			
			//closes program when window is closed
			endScreen.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		}
	}
    
	
    private class ImageButtonListener implements ActionListener {

        public void actionPerformed(ActionEvent e) {
            
            //while delay time in affect, no user input accepted
            if (myTimer.isRunning())
                return;
            
            	numClicks++;
            
            	//which button was clicked?
            	for (int i = 0; i < numButtons; i++) {
            		if (e.getSource() == buttons[i]) {
            			buttons[i].setIcon(icons[i]);
            			currentIndex = i;
                    
            		}
            	}
            
            	//check for even click
            	if (numClicks % 2 == 0) {
            		//check whether same position is clicked twice!
            		if (currentIndex == oddClickIndex) {
            			numClicks--;
            			return;
            		}
            		//are two images matching?
            		if (icons[currentIndex] != icons[oddClickIndex]) {
            			//show images for 1 sec, before flipping back
            			myTimer.start(); 
            			//if they match...
            		}else if (icons[currentIndex] == icons[oddClickIndex]){
            			//...you get a point...
            			AddPoint();
            			//...and the tiles are unusable but present.
            			MatchedTile();
            			Congrats();
            			return;
            		}else{
            		}
            	} else {
            		//record index for odd clicks
            		oddClickIndex = currentIndex;
                }
            	
            	
            	
            }
        }

    
    
    public static void main(String[] args) {
        new MemoryGame();
    }

}
