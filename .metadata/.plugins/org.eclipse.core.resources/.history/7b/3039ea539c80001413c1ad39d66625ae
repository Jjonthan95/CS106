package memorygame;

import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import java.util.Random;

/**
 *
 * @author veerasam
 */
public class MemoryGame extends JFrame {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	
	static String files[] = {"src/caillou.JPG", "daddy.JPG",
        "mommy.JPG", "Cat.JPG",
        "rosy.JPG", "teddy.JPG"};
    static JButton buttons[];
    ImageIcon closedIcon;
    int numButtons;
    ImageIcon icons[];
    int firstClick, secondClick, clickNumber;
    Timer myTimer;
    int openImages;

    public MemoryGame() {
        // Set the title.


        setTitle("Memory Game");

        // Specify an action for the close button.
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Create a BorderLayout manager.
        setLayout(new GridLayout(2, files.length));

        closedIcon = new ImageIcon("closed.JPG");
        numButtons = files.length * 2;
        buttons = new JButton[numButtons];
        icons = new ImageIcon[numButtons];
        for (int i = 0, j = 0; i < files.length; i++) {
            icons[j] = new ImageIcon(files[i]);
            buttons[j] = new JButton("");
            buttons[j].addActionListener(new MemoryGame.ImageButtonListener());
            buttons[j].setIcon(closedIcon);
            add(buttons[j++]);

            icons[j] = icons[j - 1];
            buttons[j] = new JButton("");
            buttons[j].addActionListener(new MemoryGame.ImageButtonListener());
            buttons[j].setIcon(closedIcon);
            add(buttons[j++]);
        }
        
        // randomize icons
        Random generator = new Random();
        for(int i=0 ; i<numButtons; i++)
        {
            int j = generator.nextInt(numButtons);
            ImageIcon temp = icons[i];
            icons[i] = icons[j];
            icons[j] = temp;
        }    
        // Pack and display the window.
        pack();
        setVisible(true);
        
        myTimer = new Timer(1000, new TimerListener());
    }

    private class TimerListener implements ActionListener {

        public void actionPerformed(ActionEvent e) {
            myTimer.stop();
            buttons[firstClick].setIcon(closedIcon);
            buttons[secondClick].setIcon(closedIcon);
            
        }
    }

    private class ImageButtonListener implements ActionListener {

        public void actionPerformed(ActionEvent e) {

            for (int i = 0; i < numButtons; i++) {
                if (e.getSource() == buttons[i]) {
                    buttons[i].setIcon(icons[i]);
                }
            }
        }
    }

    public static void main(String[] args) {
        new MemoryGame();
    }
}